/**
 * @file cell.h
 * File where the classes Cell, CellNode, and TransitionNode are defined.
 */

#ifndef CELL_H_
#define CELL_H_

#include "../../../models/luo_rudy.h"
#include "../../exceptions/invalidArgumentValue.h"

#include "element.h"
class Element;


/**
 * @class Cell
 * Class that defines a general cell of the ALG graph.
 */
class Cell {
protected:
	char type;   // Cell identifier.
	bool active; // Indicates if a cell is active (true) or inactive (false).
	int  level;  // Refinement level.

	// Cell coordinates.
	double centerX,
	centerY,
	centerZ;

	friend class Grid;
	friend class CellNode;
	friend class TransitionNode;

public:
	Cell( const char, bool, int, double, double, double );
	virtual ~Cell();
	virtual void print() = 0;
};


/**
 * @class CellNode
 * Class that defines cell nodes of the ALG data structure. They represent cubic
 * cells of a three-dimensional domain chosen for application and storage other
 * information related to the problem considered.
 */
class CellNode: public Cell {
private:
	unsigned long long int bunchNumber; // Bunch identifier

	Cell *north; // Points to cell node or transition node above this cell.
	Cell *south; // Points to cell node or transition node below this cell.
	Cell *east;  // Points to cell node or transition node rightward this cell.
	Cell *west;  // Points to cell node or transition node leftward this cell.
	Cell *front; // Points to cell node or transition node in front of this cell.
	Cell *back;  // Points to cell node or transition node behind this cell.

	CellNode *previous; // Previous cell in the Hilbert curve ordering.
	CellNode *next;     // Next cell of in the Hilbert curve ordering.

	// Indicates position of cell on grid according to  ordering provided by
	// the modified Hilbert curve.
	long int gridPosition;

	// Variable used to storage the form of the  Hilbert curve in the  bunch
	// created when this cell is refined.
	int hilbertShapeNumber;

	// Cell geometry.
	double faceLength;
	double halfFaceLength;

	// Variables used by some applications of partial differential equations.
	double v;
	double previousU;

	// Indicates if this cell is to be drawn or not.
	bool isToPaint;

	// Fluxes used to decide if a cell should be refined or if a bunch
	// should be derefined.
	double northFlux, // Flux coming from north direction.
		   southFlux, // Flux coming from south direction.
		   eastFlux,  // Flux coming from east direction.
		   westFlux,  // Flux coming from west direction.
		   frontFlux, // Flux coming from front direction.
		   backFlux;  // Flux coming from back direction.

	//______________________________________________________________________________
	/* First element in the row of the grid discretization matrix generated by this cell.
	   Remember that matrix rows are implemented as linked lists. This firstElement
	   corresponds to the diagonal element of the row. */
	Element *firstElement;

	//______________________________________________________________________________
	/* Variables used in solving the discretized system Ax = b through the conjugate gradient method.
   The grid discretization matrix and its resolution are directly implemented on the grid,
   which improves performance. There is no independent linear algebra package. */

	double b;   /* In Ax = b, corresponds to the element in vector b associated to this cell. */
	double Ax;  /* Element of vector Ax = b associated to this cell. Also plays the role of Ap.*/
	double r;   /* Element of the vector r = b - Ax associated to this cell. */
	double p;   /* Element of the search direction vector in the conjugate gradient algorithm. */
	double p1;  /* p's upgrade in the conjugate gradient algorithm. */

	double *sv;

	friend class Grid;
	friend class TransitionNode;

public:
	CellNode();
	~CellNode();

	void print();
	void setCellFlux( char ) throw(InvalidArgumentValue);
	double getMaximumFlux();
};

/**
 * @class TransitionNode
 * Class that defines a transition node of the ALG data structure. These nodes are
 * used only for maintenance of the data structure. Generally, they are not used
 * to store any particular property of an application.
 */
class TransitionNode: public Cell  {
private:
	Cell *singleConnector;
	Cell *quadrupleConnector1;
	Cell *quadrupleConnector2;
	Cell *quadrupleConnector3;
	Cell *quadrupleConnector4;

	/* Directions that a transition node may assume:
	 * 'e': east
	 * 'w': west
	 * 'n': north
	 * 's': south
	 * 'f': front
	 * 'b': back
	 */
	char direction;

	friend class Grid;
	friend class CellNode;

public:
	TransitionNode();
	~TransitionNode();
	void print();
};

#endif
